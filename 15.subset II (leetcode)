#t.c  O( 2^n *(k log (x) )). 2^n and s.c is   O(2^n * k) 
#appproch 1 brute force : using power set
class Solution:
    def subsetsWithDup(self, s: List[int]) -> List[List[int]]:
        n = len(s)
        ans = []
        for num in range(1 << n):
            sub = []
            for i in range(n):
                # check if the ith bit is set or not
                if num & (1 << i):
                    sub.append(s[i])
            sub.sort()
            if sub not in ans:
                ans.append(sub)
        ans.sort()
        return ans
        
        
 #approch 2   t.c O(2^n * k) and s.c is Space Complexity: O(2^n * k)
 class Solution:
    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:
        ans = []
        ds = []


        def findSubsets(ind):
            ans.append(ds[:])
            for i in range(ind, len(nums)):
                if i != ind and nums[i] == nums[i - 1]:
                    continue
                ds.append(nums[i])
                findSubsets(i + 1)
                ds.pop()
        nums.sort()
        findSubsets(0)
        return ans
